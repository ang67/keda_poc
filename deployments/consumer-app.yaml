apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-app
  namespace: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      containers:
      - name: consumer
        image: python:3.9-slim
        command: ["python", "-u", "/app/consumer.py"]
        volumeMounts:
        - name: app-volume
          mountPath: /app
        env:
        - name: RABBITMQ_HOST
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: host
        - name: RABBITMQ_QUEUE_NAME
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: queueName
        - name: RABBITMQ_PORT
          value: "5672"
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: username
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: password
      volumes:
      - name: app-volume
        configMap:
          name: consumer-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: consumer-config
  namespace: rabbitmq
data:
  consumer.py: |
    import subprocess
    import sys
    import time
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pika"])
    import pika, os, signal

    # Graceful shutdown
    def stop_consuming(signal, frame):
        print("Stopping consumer...")
        channel.stop_consuming()
        connection.close()
        sys.exit(0)

    signal.signal(signal.SIGINT, stop_consuming)
    signal.signal(signal.SIGTERM, stop_consuming)

    # Environment variables
    RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'localhost')
    RABBITMQ_PORT = int(os.getenv('RABBITMQ_PORT', 5672))
    RABBITMQ_USER = os.getenv('RABBITMQ_USER', 'guest')
    RABBITMQ_PASSWORD = os.getenv('RABBITMQ_PASSWORD', 'guest')
    QUEUE_NAME = os.getenv('RABBITMQ_QUEUE_NAME', 'test_queue')

    # Callback function
    def callback(ch, method, properties, body):
        try:
            print(f"Consumer {os.getpid()} received: {body.decode()}")
            time.sleep(1)  # Simulating work
            ch.basic_ack(delivery_tag=method.delivery_tag)
        except Exception as e:
            print(f"Processing failed: {e}")
            ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)

    # Connection
    connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            port=RABBITMQ_PORT,
            credentials=pika.PlainCredentials(
                username=RABBITMQ_USER,
                password=RABBITMQ_PASSWORD
            )
        )
    )
    channel = connection.channel()
    channel.queue_declare(queue=QUEUE_NAME)

    # Set QoS for fair distribution
    channel.basic_qos(prefetch_count=10)

    channel.basic_consume(queue=QUEUE_NAME, on_message_callback=callback)

    print(f"Consumer {os.getpid()} waiting for messages...")
    channel.start_consuming()
